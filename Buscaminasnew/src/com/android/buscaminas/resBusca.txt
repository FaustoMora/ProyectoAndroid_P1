package com.android.buscaminas;

import java.util.ArrayList;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Picture;
import android.graphics.Typeface;
import android.os.Bundle;
import android.os.Handler;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.Toast;

@SuppressLint({ "DrawAllocation", "NewApi" })
public class Buscaminas extends Activity implements OnTouchListener {
	private Tablero fondo;
	Button boton_reinicio;
	private Celda[][] casillas;
	private boolean activo = true;
	private final int filas=8;
	private final int col=8;
	boolean firstEvent=false;
	int cantidadBomba = 40;
	int condicionganar = (filas*col)-40;
	TextView cronometro;
	boolean bandera=false;
	boolean banderaoff=false;
	int cantBandera=0; //la bandera debe estar al doble es decir ahora pone 10

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);
		super.onCreate(savedInstanceState);
		setContentView(R.layout.buscaminas);
		

		LinearLayout layout2 = (LinearLayout) findViewById(R.id.layout2);
		fondo = new Tablero(this);
		fondo.setOnTouchListener(this);
		
		
		this.boton_reinicio = (Button) findViewById(R.id.boton_reinicio);
		//this.cronometro = (TextView)findViewById(R.id.cronometro);
		
		
		boton_reinicio.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				reiniciarActividad(Buscaminas.this);
				
			}
		});


		layout2.addView(fondo);
		
		casillas = new Celda[filas][filas];
		for (int f = 0; f <filas; f++) {
			for (int c = 0; c < filas; c++) {
				casillas[f][c] = new Celda();
			}
		}

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		//getMenuInflater().inflate(R.menu., menu);
		return true;
	}



	@Override
	public boolean onTouch(View v, MotionEvent event) {
		
		//para probar bandera, no pueden ser true las dos a la vez
		//this.bandera=true;
		//this.banderaoff=false;
		
		if (activo)
			for (int f = 0; f < filas; f++) {
				for (int c = 0; c < filas; c++) {

					//comprobacion de la casilla hacia si misma
					if (casillas[f][c].dentro((int) event.getX(),
							(int) event.getY())) {
						
					//if para poner bandera
					if(this.bandera){

							if(this.cantBandera<20 && !this.casillas[f][c].destapado){
								this.colocarBanderaCelda(f,c);
								this.cantBandera++;
								Toast.makeText(this, "cantBandera " + this.cantBandera,
										Toast.LENGTH_SHORT).show();
							}
					}
					if(this.banderaoff){

						if(this.casillas[f][c].banderaCelda && !this.casillas[f][c].destapado){
							this.removBanderaCelda(f, c);
							this.cantBandera++;
							Toast.makeText(this, "cantBandera" + this.cantBandera,
									Toast.LENGTH_SHORT).show();
						}
						
					}else{
					if(!this.bandera && !this.banderaoff){
					//validamos el primer click evento
					if(!this.firstEvent){
						this.firstEvent=true;
						this.disponerBombas(f,c);
						this.contarBombasPerimetro();
						}
					
					//destapamos de todas formas
					if(!this.casillas[f][c].banderaCelda){
						casillas[f][c].destapado = true;
						
						if (casillas[f][c].contenido == 80) {
							Toast.makeText(this, "Booooooooommmmmmmmmmmm",
									Toast.LENGTH_LONG).show();
							//activo = false;
						}
						
						if (casillas[f][c].contenido == 0){
							recorrer(f, c);
						}
					}
					}

					} //end bool bandera
					fondo.invalidate();
					
					}

				}//for col
			}// for fil
		
		if (checkWin()) {
			Toast.makeText(this, "Ganaste", Toast.LENGTH_LONG).show();
			//aqui deberia ir la de forma para almacenar el ranking
			activo = false;
		}

		return true;
	}
	
	//funcion que chequea si gana 
	private boolean checkWin() {
		
		int acum=0;
		for(int fil=0;fil<this.filas;fil++){
			for(int col=0;col<this.filas;col++){
				if(this.casillas[fil][col].contenido!=80 && this.casillas[fil][col].destapado){
					acum++;
				}
			}
		}
		if(acum==this.condicionganar){
			return true;
		}else{
			return false;
		}
	}

	public static void reiniciarActividad(Activity actividad){
		 	Intent intent=new Intent();
	        intent.setClass(actividad, actividad.getClass());
	        //llamamos a la actividad
	        actividad.startActivity(intent);
	        //finalizamos la actividad actual
	        actividad.finish();
	}
	


	class Tablero extends View {

		public Tablero(Context context) {
			super(context);
		}

		protected void onDraw(Canvas canvas) {
			canvas.drawRGB(0, 0, 0);
			int ancho = 0;
			if (canvas.getWidth() < canvas.getHeight())
				ancho = fondo.getWidth();
			else
				ancho = fondo.getHeight();
			int anchocua = ancho/ filas;
			
			Paint paint = new Paint(20);
			Paint paint2 = new Paint();
			paint2.setTextSize(20);
			paint2.setTypeface(Typeface.DEFAULT_BOLD);
			paint2.setARGB(255, 0, 0, 255);
			Paint paintlinea1 = new Paint();
			//paintlinea1.setARGB(0, 255, 255, 255);
			
			
			int filaact = 0;
			for (int f = 0; f < filas; f++) {
				for (int c = 0; c < filas; c++) {
					casillas[f][c].fijarxy(c * anchocua, filaact, anchocua);
					

					
					
					if (casillas[f][c].destapado == false)
						//Visible
						paint.setARGB(255,230,230,250 ); //100,245,245,220
					else 						//BackGround
						
						
						
						//this.findViewById(R.id.button1);
						//Background square
						
						paint.setARGB(255,245,222,179); //200,227,168,87
					canvas.drawRect(c * anchocua, filaact, c * anchocua
							+ anchocua - 2, filaact + anchocua - 2, paint);
					
					
					// linea blanca
				/*canvas.drawLine(c * anchocua, filaact, c * anchocua
							+ anchocua, filaact, paintlinea1);
					
					canvas.drawLine(c * anchocua + anchocua - 1, filaact, c
							* anchocua + anchocua - 1, filaact + anchocua,
							paintlinea1);*/
					
					//pinto bandera
					if(casillas[f][c].banderaCelda && !casillas[f][c].destapado){
						paint.setARGB(255, 119, 192, 73);
						canvas.drawRect(c * anchocua, filaact, c * anchocua
								+ anchocua - 2, filaact + anchocua - 2, paint);
					}
						
					if (casillas[f][c].contenido >= 1
							&& casillas[f][c].contenido <= filas
							&& casillas[f][c].destapado)
						canvas.drawText(
								String.valueOf(casillas[f][c].contenido), c
										* anchocua + (anchocua / 2) - filas,
								filaact + anchocua / 2, paint2);
					
					//Aqui esta la bomba
					if (casillas[f][c].contenido == 80
							&& casillas[f][c].destapado) {
						Paint bomba = new Paint();
						bomba.setARGB(255, 255, 0, 0);
						canvas.drawCircle(c * anchocua + (anchocua / 2),
								filaact + (anchocua / 2), filas, bomba);
						//Picture p = new Picture();
						//canvas.drawPicture(new Picture());
					}

				}
				filaact = filaact + anchocua;
			}
		}
	}
	
	//colocar bandera en celda y remover bandera en celda
	
	private void removBanderaCelda(int fil,int co){
		casillas[fil][co].banderaCelda=false;
	}
	
	private void colocarBanderaCelda(int fil, int co){
		
		casillas[fil][co].banderaCelda=true;
	}
	

	//disponer bombas actualizado para el primer click
	private void disponerBombas(int fil , int co) {

		do {
			int fila = (int) (Math.random() * filas);
			int columna = (int) (Math.random() * filas);
			//le agrego posicion actual para primer click
			if(fila!= fil || columna !=co){
				if (casillas[fila][columna].contenido == 0) {
					//80 significa que tiene bomba
					casillas[fila][columna].contenido = 80;
					cantidadBomba--;
				}

			}
		} while (cantidadBomba != 0);
		
	}

	//coloca la cantidad de bombas para todas las casillas
	private void contarBombasPerimetro() {
		for (int f = 0; f < filas; f++) {
			for (int c = 0; c < filas; c++) {
				if (casillas[f][c].contenido == 0) {
					int cant = contarCoordenada(f, c);
					casillas[f][c].contenido = cant;
				}
			}
		}
	}
	
	//devuelve la cantidad de bombas
	int contarCoordenada(int fila, int columna) {
		int total = 0;
		if (fila - 1 >= 0 && columna - 1 >= 0) {
			if (casillas[fila - 1][columna - 1].contenido == 80)
				total++;
		}
		if (fila - 1 >= 0) {
			if (casillas[fila - 1][columna].contenido == 80)
				total++;
		}
		if (fila - 1 >= 0 && columna + 1 < filas) {
			if (casillas[fila - 1][columna + 1].contenido == 80)
				total++;
		}

		if (columna + 1 < filas) {
			if (casillas[fila][columna + 1].contenido == 80)
				total++;
		}
		if (fila + 1 <filas && columna + 1 <filas) {
			if (casillas[fila + 1][columna + 1].contenido == 80)
				total++;
		}

		if (fila + 1 < filas) {
			if (casillas[fila + 1][columna].contenido == 80)
				total++;
		}
		if (fila + 1 < filas && columna - 1 >= 0) {
			if (casillas[fila + 1][columna - 1].contenido == 80)
				total++;
		}
		if (columna - 1 >= 0) {
			if (casillas[fila][columna - 1].contenido == 80)
				total++;
		}
		return total;
	}

	private void recorrer(int fil, int col) {

		if (fil >= 0 && fil < filas && col >= 0 && col < filas) {
			if (casillas[fil][col].contenido == 0) {
				casillas[fil][col].destapado = true;
				//significa que ia estan visitadas
				casillas[fil][col].contenido = 50;
				recorrer(fil, col + 1);
				recorrer(fil, col - 1);
				recorrer(fil + 1, col);
				recorrer(fil - 1, col);
				recorrer(fil - 1, col - 1);
				recorrer(fil - 1, col + 1);
				recorrer(fil + 1, col + 1);
				recorrer(fil + 1, col - 1);
				//si tienen numeros solo los destapa
			} else if (casillas[fil][col].contenido >= 1
					&& casillas[fil][col].contenido <= filas) {
				casillas[fil][col].destapado = true;
			}
		}
	}


}
